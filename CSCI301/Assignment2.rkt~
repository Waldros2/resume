#lang racket
;Scott Waldron
;W00970369
;CSCI301 Program2



;Problem1
(define set-equal?
  (lambda (set1 set2)
    (cond
      ((subset? set1 set2)
       (subset? set2 set1))
      (else #f))))

(define subset?
  (lambda(set1 set2)
    (cond
      ((null? set1) #t)
      (else
       (and (member? (car set1) set2)
            (subset? (cdr set1) set2))))))

(define member?
  (lambda (a lat)
    (cond
      ((null? lat) #f)
      (else (or (eq? (car lat) a)
                (member? a (cdr lat)))))))

;Problem2
(define RemoveFirst
  (lambda (n lat)
    (cond
      ((null? lat) quote() (zero? n) quote())
      else(